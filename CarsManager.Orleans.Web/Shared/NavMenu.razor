@using CarsManager.Orleans.Web.Services.Interfaces;

@inject IBoughtCarsItemsService CarBoughtItemsService;

<MudNavMenu Rounded="true" Margin=Margin.Normal Class="pa-2" Color=Color.Success>
    
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Filled.InsertEmoticon">Home</MudNavLink>

    <MudNavLink Href="CarsInventory" Icon="@Icons.Filled.Inventory">Cars Inventory</MudNavLink>
    
    <MudNavLink Href="Cars" Icon="@Icons.Filled.ProductionQuantityLimits">Cars</MudNavLink>
    
    <MudNavLink Href="BoughtCarCart" Icon="@Icons.Filled.CarRental">
        <MudBadge Color="Color.Tertiary" Overlap="true" Bordered="true" Content="@_count" Origin="Origin.CenterRight" Class="mud-width-full">
            Cars Bought Cart
        </MudBadge>
    </MudNavLink>
    
    <MudNavLink Href="cartracker" Icon="@Icons.Filled.GpsFixed"> Cars Tracker</MudNavLink>

</MudNavMenu>

@code {
    int _count = 0;

    [Inject]
    public ComponentStateChangedObserver Observer { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Observer.OnStateChanged += UpdateCountAsync;

        await UpdateCountAsync();
    }

    Task UpdateCountAsync() =>
        InvokeAsync(async () =>
        {
            _count = await CarBoughtItemsService.GetCarBoughtCount();
            StateHasChanged();
        });
}